name: CI & Version Bump

################################################################################
# 1. Trigger rules
#    • Run tests on every PR update (pull_request *and* pull_request_target so
#      we can later “need” the result from bump-version).
#    • Run the bump job only via pull_request_target (it needs write access to
#      the destination branch) *and* only after tests succeeded.
################################################################################
on:
  pull_request:
    types: [opened, synchronize, reopened]
  pull_request_target:
    types: [opened, synchronize, reopened]

################################################################################
# 2. Jobs
################################################################################
jobs:
  # ────────────────────────────────────────────────────────────────────────────
  tests:
    name: Shell tests
    runs-on: ubuntu-latest
    steps:
      - name: Check out PR code
        uses: actions/checkout@v4
        with:
          # For pull_request_target we still want the PR branch’s contents
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

    #  - name: Run snapshot tests
    #    run: |
    #      chmod +x test.sh
    #      bash test.sh

  # ────────────────────────────────────────────────────────────────────────────
  bump-version:
    name: Auto-increment patch version
    needs: tests
    if: >
      github.event_name == 'pull_request_target' && success() && !contains(github.event.pull_request.body, 'NO-BUMP')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Check out PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Bump the most-minor version segment
        id: bump
        run: |
          current=$(jq -r '.version' config.json)
          # Split X.Y.Z… → bump last segment
          IFS='.' read -r -a parts <<< "$current"
          last=$(( ${#parts[@]} - 1 ))
          parts[$last]=$(( parts[$last] + 1 ))
          new=$(IFS='.'; echo "${parts[*]}")
          jq ".version = \"$new\"" config.json > cfg.tmp && mv cfg.tmp config.json
          echo "new=$new" >> "$GITHUB_OUTPUT"

      - name: Commit & push
        run: |
          git config user.name  "snapshot-bot"
          git config user.email "snapshot-bot@users.noreply.github.com"
          git add config.json
          git commit -m "chore: bump version to ${{ steps.bump.outputs.new }} [skip ci]" || exit 0
          git push origin HEAD:${{ github.event.pull_request.head.ref }}
